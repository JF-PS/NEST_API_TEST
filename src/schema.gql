# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteSpotResponse {
  deleted: Boolean!
}

type FavoriteEntity {
  createdAt: DateTime!
  id: String!
  profile: ProfileEntity!
  profileId: String!
  spot: SpotEntity!
  spotId: String!
  updatedAt: DateTime!
}

input FavoriteInput {
  favoriteId: String
  spotId: String!
}

type LogoutResponse {
  loggedOut: Boolean!
}

type Mutation {
  createOrUpdateRating(ratingInput: RatingInput!): RatingResponse!
  deleteSpot(id: String!): DeleteSpotResponse!
  getNewTokens: NewTokensResponse!
  insertSpot(insertSpotInput: SpotInput!): SpotEntity!
  logout(id: String!): LogoutResponse!
  signIn(signInInput: SignInInput!): SignResponse!
  signUp(signUpInput: SignUpInput!): SignResponse!
  toggleFavorite(favoriteInput: FavoriteInput!): ToggleFavoriteResponse!
  updateSpot(updateSpotInput: SpotInput!): SpotEntity!
}

type NewTokensResponse {
  accessToken: String!
  refreshToken: String!
}

type ProfileEntity {
  createdAt: DateTime!
  favorites: [FavoriteEntity!]
  gamePoint: Float!
  id: String!
  photoUrl: String
  pseudo: String!
  ratings: [RatingEntity!]
  spots: [SpotEntity!]
  updatedAt: DateTime!
  user: UserEntity!
  userId: String!
}

type Query {
  spotByPk(id: String!): SpotEntity!
  spots(spotsInput: SpotsInput!): [SpotEntity!]!
  spotsProfile: [FavoriteEntity!]!
}

type RatingEntity {
  createdAt: DateTime!
  id: String!
  profile: ProfileEntity!
  profileId: String!
  rate: Float!
  spot: SpotEntity!
  spotId: String!
  updatedAt: DateTime!
}

input RatingInput {
  rate: Float!
  ratingId: String
  spotId: String!
}

type RatingResponse {
  avg: Float!
  currentRating: RatingEntity!
  maxVote: Float!
}

input SignInInput {
  email: String!
  password: String!
}

type SignResponse {
  accessToken: String!
  refreshToken: String!
  user: UserEntity!
}

input SignUpInput {
  email: String!
  password: String!
  pseudo: String!
}

type SpotEntity {
  address: String!
  averageRating: Float!
  category: String!
  createdAt: DateTime!
  description: String!
  favorites: [FavoriteEntity!]
  id: String!
  isCanPark: Boolean!
  isHidden: Boolean!
  lat: Float!
  lng: Float!
  name: String!
  profile: ProfileEntity!
  profileId: String!
  ratings: [RatingEntity!]
  region: String!
  spotPicture: [SpotPictureEntity!]
  tags: [TagEntity!]
  updatedAt: DateTime!
}

input SpotInput {
  address: String!
  averageRating: Float!
  category: String!
  description: String!
  id: String
  isCanPark: Boolean!
  isHidden: Boolean!
  lat: Float!
  lng: Float!
  name: String!
  region: String!
  spotPicture: [SpotPictureInput!]
  tags: [TagInput!]
}

type SpotPictureEntity {
  createdAt: DateTime!
  id: String!
  spot: SpotEntity!
  spotId: String!
  updatedAt: DateTime!
  url: String!
}

input SpotPictureInput {
  url: String!
}

input SpotsInput {
  address: String
  category: String
  id: String
  isCanPark: Boolean
  isHidden: Boolean
  orderBy: String
  profileId: String
  region: String
  searchValue: String
  skip: Float
  tagListId: [String!]
  take: Float
}

type TagEntity {
  category: String!
  createdAt: DateTime!
  id: String!
  name: String!
  spots: [SpotEntity!]
  tagPictureUrl: String!
  updatedAt: DateTime!
}

input TagInput {
  id: String!
}

type ToggleFavoriteResponse {
  favoriteId: String
  isFavorite: Boolean!
}

type UserEntity {
  createdAt: DateTime!
  email: String!
  hashedPassword: String!
  hashedRefreshToken: String
  id: String!
  profile: ProfileEntity
  role: String!
  updatedAt: DateTime!
}